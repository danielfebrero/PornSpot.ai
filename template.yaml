AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: pornspot.ai - Minimalist Gallery

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  DomainName:
    Type: String
    Default: pornspot.ai
    Description: Domain name for the application

# Conditions removed - IsProduction was not used

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x
    MemorySize: 256
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DYNAMODB_TABLE: !Ref MediaTable
        S3_BUCKET: !Ref MediaBucket
        CLOUDFRONT_DOMAIN: !Sub "https://${CloudFrontDistribution.DomainName}"
        FROM_EMAIL: !Sub "noreply@${DomainName}"
        FROM_NAME: "PornSpot.ai"
        GOOGLE_CLIENT_ID: !Sub "{{resolve:ssm:/pornspot-ai/${Environment}/google-client-id}}"
        USE_CUSTOM_DOMAIN: "true" # Set to "true" when using api.pornspot.ai

Resources:
  # DynamoDB Table - Single table design
  MediaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-pornspot-media"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # S3 Bucket for media storage
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-pornspot-media-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - http://localhost:3000
              - !Sub "https://dev.${DomainName}"
              - !Sub "https://staging.${DomainName}"
              - !Sub "https://www.${DomainName}"
              - !Sub "https://${DomainName}"
              - "https://*.vercel.app"
              - "https://*.pornspot.ai"
              - "https://pornspot-ai-frontend.vercel.app"
            MaxAge: 3000
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${Environment}-pornspot-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt MediaBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !Ref OriginAccessControl
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # S3 Bucket Policy for CloudFront
  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${MediaBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # Authorizer Functions - defined before API Gateway
  UserAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-authorizer"
      CodeUri: backend/
      Handler: dist/functions/user/auth/authorizer.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  AdminAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-authorizer"
      CodeUri: backend/
      Handler: dist/functions/admin/auth/authorizer.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-pornspot-api"
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: AWS_IAM
        Authorizers:
          AdminAuthorizer:
            FunctionArn: !GetAtt AdminAuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
            ReauthorizeEvery: 0
          UserAuthorizer:
            FunctionArn: !GetAtt UserAuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
            ReauthorizeEvery: 0

  # Lambda Functions
  GetAlbumsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-albums"
      CodeUri: backend/
      Handler: dist/functions/albums/get.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  CreateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-create-album"
      CodeUri: backend/
      Handler: dist/functions/albums/create.handler
      Events:
        PostCreateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: POST
            Auth:
              Authorizer: AdminAuthorizer
        OptionsCreateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"

  GetAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-album"
      CodeUri: backend/
      Handler: dist/functions/albums/getById.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UploadMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-upload-media"
      CodeUri: backend/
      Handler: dist/functions/media/upload.handler
      Events:
        PostUploadMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: POST
            Auth:
              Authorizer: AdminAuthorizer
        OptionsUploadMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3WritePolicy:
            BucketName: !Ref MediaBucket

  GetMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-media"
      CodeUri: backend/
      Handler: dist/functions/media/get.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  ProcessUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-process-upload"
      CodeUri: backend/
      Handler: dist/functions/media/process-upload.handler
      MemorySize: 1024
      Timeout: 120
      Environment:
        Variables:
          MEDIA_BUCKET_NAME: !Sub "${Environment}-pornspot-media-${AWS::AccountId}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}/*"
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
  # Lambda permission for S3 to invoke ProcessUploadFunction
  ProcessUploadFunctionS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessUploadFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}/*"
      SourceAccount: !Ref AWS::AccountId

  # Custom resource to configure S3 bucket notification
  ConfigureS3NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-configure-s3-notification"
      Runtime: python3.9
      Handler: index.handler
      Timeout: 60
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutBucketNotificationConfiguration
                - s3:GetBucketNotificationConfiguration
              Resource: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}"
      InlineCode: |
        import boto3
        import json
        import cfnresponse

        def handler(event, context):
            s3 = boto3.client('s3')
            bucket_name = event['ResourceProperties']['BucketName']
            function_arn = event['ResourceProperties']['FunctionArn']
            
            try:
                if event['RequestType'] == 'Delete':
                    # Remove notification configuration
                    s3.put_bucket_notification_configuration(
                        Bucket=bucket_name,
                        NotificationConfiguration={}
                    )
                else:
                    # Add notification configuration
                    s3.put_bucket_notification_configuration(
                        Bucket=bucket_name,
                        NotificationConfiguration={
                            'LambdaConfigurations': [
                                {
                                    'Id': 'ProcessUploadTrigger',
                                    'LambdaFunctionArn': function_arn,
                                    'Events': ['s3:ObjectCreated:*'],
                                    'Filter': {
                                        'Key': {
                                            'FilterRules': [
                                                {
                                                    'Name': 'prefix',
                                                    'Value': 'uploads/'
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    )
                
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
                print(f"Error: {str(e)}")
                cfnresponse.send(event, context, cfnresponse.FAILED, {})

  S3NotificationConfiguration:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ConfigureS3NotificationFunction.Arn
      BucketName: !Sub "${Environment}-pornspot-media-${AWS::AccountId}"
      FunctionArn: !GetAtt ProcessUploadFunction.Arn
    DependsOn:
      - MediaBucket
      - ProcessUploadFunctionS3Permission

  # Admin Authentication Functions
  AdminLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-login"
      CodeUri: backend/
      Handler: dist/functions/admin/auth/login.handler
      Events:
        PostLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/login
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/login
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  AdminLogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-logout"
      CodeUri: backend/
      Handler: dist/functions/admin/auth/logout.handler
      Events:
        PostLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/logout
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/logout
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  AdminMeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-me"
      CodeUri: backend/
      Handler: dist/functions/admin/auth/me.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/me
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
  UserLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-login"
      CodeUri: backend/
      Handler: dist/functions/user/auth/login.handler
      Events:
        PostLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/login
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/login
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
  # Admin Album Management Functions
  AdminUpdateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-update-album"
      CodeUri: backend/
      Handler: dist/functions/admin/albums/update.handler
      MemorySize: 1024
      Timeout: 60
      Events:
        PutUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: PUT
            Auth:
              Authorizer: AdminAuthorizer
        OptionsUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"

  AdminDeleteAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-delete-album"
      CodeUri: backend/
      Handler: dist/functions/admin/albums/delete.handler
      Events:
        DeleteAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: DELETE
            Auth:
              Authorizer: AdminAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  AdminListAlbumsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-list-albums"
      CodeUri: backend/
      Handler: dist/functions/admin/albums/list.handler
      Events:
        GetAlbums:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsAlbums:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  AdminDeleteMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-delete-media"
      CodeUri: backend/
      Handler: dist/functions/admin/media/delete.handler
      Events:
        DeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}/media/{mediaId}
            Method: DELETE
            Auth:
              Authorizer: AdminAuthorizer
        OptionsAdminDeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}/media/{mediaId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
              Resource: !GetAtt MediaTable.Arn
            - Effect: Allow
              Action:
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${MediaBucket}/*"
            - Effect: Allow
              Action:
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${MediaBucket}/*"

  AdminStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-stats"
      CodeUri: backend/
      Handler: dist/functions/admin/stats.handler
      Events:
        GetStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/stats
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/stats
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket

  # User Authentication Functions
  UserRegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-register"
      CodeUri: backend/
      Handler: dist/functions/user/auth/register.handler
      Events:
        PostRegister:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/register
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsRegister:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/register
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"

  UserLogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-logout"
      CodeUri: backend/
      Handler: dist/functions/user/auth/logout.handler
      Events:
        PostLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/logout
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/logout
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserMeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-me"
      CodeUri: backend/
      Handler: dist/functions/user/auth/me.handler
      Events:
        GetMe:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/me
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserVerifyEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-verify-email"
      CodeUri: backend/
      Handler: dist/functions/user/auth/verify-email.handler
      Events:
        PostVerifyEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/verify-email
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsVerifyEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/verify-email
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserResendVerificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-resend-verification"
      CodeUri: backend/
      Handler: dist/functions/user/auth/resend-verification.handler
      Events:
        PostResendVerification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/resend-verification
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsResendVerification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/resend-verification
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"

  UserOAuthGoogleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-oauth-google"
      CodeUri: backend/
      Handler: dist/functions/user/auth/oauth-google.handler
      Events:
        GetOAuthCallback:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/oauth/callback
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"

  # User Interaction Functions
  UserLikeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-like"
      CodeUri: backend/
      Handler: dist/functions/user/interactions/like.handler
      Events:
        PostLike:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/like
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsLike:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/like
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserBookmarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-bookmark"
      CodeUri: backend/
      Handler: dist/functions/user/interactions/bookmark.handler
      Events:
        PostBookmark:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmark
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsBookmark:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmark
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserGetLikesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-likes"
      CodeUri: backend/
      Handler: dist/functions/user/interactions/get-likes.handler
      Events:
        GetLikes:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/likes
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsLikes:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/likes
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGetBookmarksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-bookmarks"
      CodeUri: backend/
      Handler: dist/functions/user/interactions/get-bookmarks.handler
      Events:
        GetBookmarks:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmarks
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsBookmarks:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmarks
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${Environment}-pornspot-api-url"

  CloudFrontUrl:
    Description: CloudFront distribution URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${Environment}-pornspot-cloudfront-url"

  MediaBucketName:
    Description: S3 bucket name for media storage
    Value: !Ref MediaBucket
    Export:
      Name: !Sub "${Environment}-pornspot-media-bucket"

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref MediaTable
    Export:
      Name: !Sub "${Environment}-pornspot-dynamodb-table"
