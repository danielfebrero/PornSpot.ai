AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: pornspot.ai - Minimalist Gallery

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  DomainName:
    Type: String
    Default: pornspot.ai
    Description: Domain name for the application

# Conditions removed - IsProduction was not used

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x
    MemorySize: 256
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DYNAMODB_TABLE: !Ref MediaTable
        S3_BUCKET: !Ref MediaBucket
        CLOUDFRONT_DOMAIN: !Sub "https://${CloudFrontDistribution.DomainName}"
        FROM_EMAIL: !Sub "noreply@${DomainName}"
        FROM_NAME: "PornSpot.ai"
        GOOGLE_CLIENT_ID: !Sub "{{resolve:ssm:/pornspot-ai/${Environment}/google-client-id}}"
        GOOGLE_CLIENT_SECRET: ""
        REVALIDATE_SECRET: ""
        FRONTEND_URL: ""
        AWS_SAM_LOCAL: ""
        LOCAL_AWS_ENDPOINT: ""
        IS_OFFLINE: ""
        USE_CUSTOM_DOMAIN: "true" # Set to "true" when using api.pornspot.ai
        SENDGRID_API_KEY: ""

Resources:
  # DynamoDB Table - Single table design
  MediaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-pornspot-media"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
        - AttributeName: GSI3PK
          AttributeType: S
        - AttributeName: GSI3SK
          AttributeType: S
        - AttributeName: GSI4PK
          AttributeType: S
        - AttributeName: GSI4SK
          AttributeType: S
        - AttributeName: isPublic
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI3
          KeySchema:
            - AttributeName: GSI3PK
              KeyType: HASH
            - AttributeName: GSI3SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI4
          KeySchema:
            - AttributeName: GSI4PK
              KeyType: HASH
            - AttributeName: GSI4SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: isPublic-createdAt-index
          KeySchema:
            - AttributeName: isPublic
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # S3 Bucket for media storage
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-pornspot-media-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - http://localhost:3000
              - !Sub "https://dev.${DomainName}"
              - !Sub "https://staging.${DomainName}"
              - !Sub "https://www.${DomainName}"
              - !Sub "https://${DomainName}"
              - "https://*.vercel.app"
              - "https://*.pornspot.ai"
              - "https://pornspot-ai-frontend.vercel.app"
            MaxAge: 3000
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${Environment}-pornspot-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt MediaBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !Ref OriginAccessControl
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # S3 Bucket Policy for CloudFront
  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${MediaBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # Lambda Shared Layer
  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${Environment}-pornspot-shared-layer"
      Description: Shared utilities and types for PornSpot Lambda functions (without Sharp)
      ContentUri: backend/layers/shared/
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Retain

  # Sharp Layer for image processing (pH200/sharp-layer)
  SharpLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${Environment}-pornspot-sharp-layer"
      ContentUri: backend/layers/sharp/release-x64.zip
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - nodejs18.x
        - nodejs20.x
      Description: Sharp image processing library v0.34.3

  # Authorizer Functions - defined before API Gateway
  UserAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-authorizer"
      CodeUri: backend/dist/functions/user/auth/
      Handler: authorizer.handler
      Layers:
        - !Ref SharedLayer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  AdminAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-authorizer"
      CodeUri: backend/dist/functions/admin/auth/
      Handler: authorizer.handler
      Layers:
        - !Ref SharedLayer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  # Moderator authorizer - allows admin and moderator roles
  ModeratorAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-moderator-authorizer"
      CodeUri: backend/dist/functions/moderator/auth/
      Handler: authorizer.handler
      Layers:
        - !Ref SharedLayer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-pornspot-api"
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: AWS_IAM
        Authorizers:
          AdminAuthorizer:
            FunctionArn: !GetAtt AdminAuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
            ReauthorizeEvery: 0
          ModeratorAuthorizer:
            FunctionArn: !GetAtt ModeratorAuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
            ReauthorizeEvery: 0
          UserAuthorizer:
            FunctionArn: !GetAtt UserAuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
            ReauthorizeEvery: 0

  # Lambda Functions
  GetAlbumsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-albums"
      CodeUri: backend/dist/functions/albums/
      Handler: get.handler
      Layers:
        - !Ref SharedLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  CreateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-create-album"
      CodeUri: backend/dist/functions/albums/
      Handler: create.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostCreateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsCreateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"

  GetAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-album"
      CodeUri: backend/dist/functions/albums/
      Handler: getById.handler
      Layers:
        - !Ref SharedLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UpdateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-update-album"
      CodeUri: backend/dist/functions/albums/
      Handler: update.handler
      Layers:
        - !Ref SharedLayer
        - !Ref SharpLayer
      MemorySize: 1024
      Timeout: 60
      Events:
        PutUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}
            Method: PUT
            Auth:
              Authorizer: UserAuthorizer
        OptionsUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"

  DeleteAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-delete-album"
      CodeUri: backend/dist/functions/albums/
      Handler: delete.handler
      Layers:
        - !Ref SharedLayer
      Events:
        DeleteAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UploadMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-upload-media"
      CodeUri: backend/dist/functions/media/
      Handler: add.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostUploadMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: POST
            Auth:
              Authorizer: AdminAuthorizer
        OptionsUploadMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3WritePolicy:
            BucketName: !Ref MediaBucket

  GetMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-media"
      CodeUri: backend/dist/functions/media/
      Handler: get.handler
      Layers:
        - !Ref SharedLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  GetMediaByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-media-by-id"
      CodeUri: backend/dist/functions/media/
      Handler: get-by-id.handler
      Layers:
        - !Ref SharedLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /media/{mediaId}
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  RemoveMediaFromAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-remove-media-from-album"
      CodeUri: backend/dist/functions/media/
      Handler: remove.handler
      Layers:
        - !Ref SharedLayer
      Events:
        DeleteMediaFromAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media/{mediaId}
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
        OptionsRemoveMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media/{mediaId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  GetAllMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-all-media"
      CodeUri: backend/dist/functions/media/
      Handler: get-all.handler
      Layers:
        - !Ref SharedLayer
      Timeout: 60
      MemorySize: 512
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /media
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserMediaListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-media-list"
      CodeUri: backend/dist/functions/user/media/
      Handler: list.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetUserMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/media
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsUserMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/media
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  ProcessUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-process-upload"
      CodeUri: backend/dist/functions/media/
      Handler: process-upload.handler
      Layers:
        - !Ref SharedLayer
        - !Ref SharpLayer
      MemorySize: 1024
      Timeout: 120
      Environment:
        Variables:
          MEDIA_BUCKET_NAME: !Sub "${Environment}-pornspot-media-${AWS::AccountId}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}/*"
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
  # Lambda permission for S3 to invoke ProcessUploadFunction
  ProcessUploadFunctionS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessUploadFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}"
      SourceAccount: !Ref AWS::AccountId

  # Custom resource to configure S3 bucket notification
  ConfigureS3NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-configure-s3-notification"
      Runtime: python3.12
      Handler: index.handler
      CodeUri: backend/functions/ConfigureS3Notification/
      Timeout: 60
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutBucketNotification
                - s3:GetBucketNotification
                - s3:PutBucketNotificationConfiguration # (add both for safety)
                - s3:GetBucketNotificationConfiguration
              Resource: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}"

  S3NotificationConfiguration:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ConfigureS3NotificationFunction.Arn
      BucketName: !Sub "${Environment}-pornspot-media-${AWS::AccountId}"
      FunctionArn: !GetAtt ProcessUploadFunction.Arn
      # Force update by changing this timestamp when needed
      Version: "2025-07-20-002"
      # Ensure permission exists before configuring notification
      LambdaPermissionId: !Ref ProcessUploadFunctionS3Permission
    DependsOn:
      - MediaBucket
      - ProcessUploadFunctionS3Permission

  # Configuration API Functions
  GetPermissionsConfigFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-permissions-config"
      CodeUri: backend/dist/functions/config/
      Handler: permissions.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetPermissions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /config/permissions
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsPermissions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /config/permissions
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  # Admin Authentication Functions
  AdminLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-login"
      CodeUri: backend/dist/functions/admin/auth/
      Handler: login.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/login
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/login
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  CheckUsernameFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-check-username"
      CodeUri: backend/dist/functions/user/auth/
      Handler: check-username.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostCheckUsername:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/check-username
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsCheckUsername:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/check-username
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  AdminLogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-logout"
      CodeUri: backend/dist/functions/admin/auth/
      Handler: logout.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/logout
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/logout
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  AdminMeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-me"
      CodeUri: backend/dist/functions/admin/auth/
      Handler: me.handler
      Layers:
        - !Ref SharedLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/me
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
  UserLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-login"
      CodeUri: backend/dist/functions/user/auth/
      Handler: login.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/login
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/login
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
  # Admin Album Management Functions
  AdminUpdateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-update-album"
      CodeUri: backend/dist/functions/admin/albums/
      Handler: update.handler
      Layers:
        - !Ref SharedLayer
        - !Ref SharpLayer
      MemorySize: 1024
      Timeout: 60
      Events:
        PutUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: PUT
            Auth:
              Authorizer: AdminAuthorizer
        OptionsUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"

  AdminDeleteAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-delete-album"
      CodeUri: backend/dist/functions/admin/albums/
      Handler: delete.handler
      Layers:
        - !Ref SharedLayer
      Events:
        DeleteAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: DELETE
            Auth:
              Authorizer: AdminAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  AdminListAlbumsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-list-albums"
      CodeUri: backend/dist/functions/admin/albums/
      Handler: list.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetAlbums:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsAlbums:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  AdminDeleteMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-delete-media"
      CodeUri: backend/dist/functions/admin/media/
      Handler: delete.handler
      Layers:
        - !Ref SharedLayer
      Events:
        DeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}/media/{mediaId}
            Method: DELETE
            Auth:
              Authorizer: AdminAuthorizer
        OptionsAdminDeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}/media/{mediaId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
              Resource: !GetAtt MediaTable.Arn
            - Effect: Allow
              Action:
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${MediaBucket}/*"
            - Effect: Allow
              Action:
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${MediaBucket}/*"

  AdminStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-stats"
      CodeUri: backend/dist/functions/admin/
      Handler: stats.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/stats
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/stats
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket

  # User Authentication Functions
  UserRegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-register"
      CodeUri: backend/dist/functions/user/auth/
      Handler: register.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostRegister:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/register
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsRegister:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/register
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/sendgrid-api-key"

  UserLogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-logout"
      CodeUri: backend/dist/functions/user/auth/
      Handler: logout.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/logout
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/logout
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UserMeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-me"
      CodeUri: backend/dist/functions/user/auth/
      Handler: me.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetMe:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/me
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserVerifyEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-verify-email"
      CodeUri: backend/dist/functions/user/auth/
      Handler: verify-email.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostVerifyEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/verify-email
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsVerifyEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/verify-email
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserResendVerificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-resend-verification"
      CodeUri: backend/dist/functions/user/auth/
      Handler: resend-verification.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostResendVerification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/resend-verification
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsResendVerification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/resend-verification
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/sendgrid-api-key"

  UserOAuthGoogleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-oauth-google"
      CodeUri: backend/dist/functions/user/auth/
      Handler: oauth-google.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostOAuthCallback:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/oauth/callback
            Method: POST
            Auth:
              Authorizer: NONE
        GetOAuthCallback:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/oauth/callback
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsOAuthCallback:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/oauth/callback
            Method: OPTIONS
            Auth: { Authorizer: NONE }
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/google-client-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/sendgrid-api-key"

  # User Interaction Functions
  UserLikeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-like"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: like.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostLike:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/like
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsLike:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/like
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UserBookmarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-bookmark"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: bookmark.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostBookmark:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmark
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsBookmark:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmark
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UserViewFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-view"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: view.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostView:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/view
            Method: POST
            Auth:
              Authorizer: NONE # Views can be tracked without authentication
        OptionsView:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/view
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserGetLikesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-likes"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: get-likes.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetLikes:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/likes
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsLikes:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/likes
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGetBookmarksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-bookmarks"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: get-bookmarks.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetBookmarks:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmarks
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsBookmarks:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmarks
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGetInteractionStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-interaction-status"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: get-interaction-status.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetInteractionStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/status
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsInteractionStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/status
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGetCommentLikeStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-comment-like-status"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: get-comment-like-status.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetCommentLikeStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment-like-status
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsCommentLikeStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment-like-status
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGetInteractionStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-insights"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: get-insights.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetInteractionStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/insights
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsInteractionStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/insights
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  # Comment Functions
  UserCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-comment"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: comment.handler
      Layers:
        - !Ref SharedLayer
      Events:
        PostComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        PutComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment/{commentId}
            Method: PUT
            Auth:
              Authorizer: UserAuthorizer
        DeleteComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment/{commentId}
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
        OptionsComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        OptionsCommentById:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment/{commentId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  TargetGetCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-target-get-comments"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: get-comments.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetComments:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comments/{targetType}/{targetId}
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsGetComments:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comments/{targetType}/{targetId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGetCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-comments"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: get-comments.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GetComments:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comments
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsGetComments:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comments
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserCommentLikeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-comment-like"
      CodeUri: backend/dist/functions/user/interactions/
      Handler: comment-like.handler
      Layers:
        - !Ref SharedLayer
      Events:
        CommentLike:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment-like
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsCommentLike:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment-like
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  # AI Generation Functions
  GenerationCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-generation-create"
      CodeUri: backend/dist/functions/generation/
      Handler: generate.handler
      Layers:
        - !Ref SharedLayer
      Events:
        GeneratePost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generation/generate
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsGenerate:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generation/generate
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${Environment}-pornspot-api-url"

  CloudFrontUrl:
    Description: CloudFront distribution URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${Environment}-pornspot-cloudfront-url"

  MediaBucketName:
    Description: S3 bucket name for media storage
    Value: !Ref MediaBucket
    Export:
      Name: !Sub "${Environment}-pornspot-media-bucket"

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref MediaTable
    Export:
      Name: !Sub "${Environment}-pornspot-dynamodb-table"
