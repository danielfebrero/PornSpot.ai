AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Fabularius.art - Minimalist Gallery

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  DomainName:
    Type: String
    Default: fabularius.art
    Description: Domain name for the application

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    MemorySize: 256
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DYNAMODB_TABLE: !Ref MediaTable
        S3_BUCKET: !Ref MediaBucket
        CLOUDFRONT_DOMAIN: !GetAtt CloudFrontDistribution.DomainName

Resources:
  # DynamoDB Table - Single table design
  MediaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-fabularius-media"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # S3 Bucket for media storage
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-fabularius-media-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - http://localhost:3000
              - !Sub "https://dev.${DomainName}"
              - !Sub "https://staging.${DomainName}"
              - !Sub "https://www.${DomainName}"
              - !Sub "https://${DomainName}"
              - "https://*.vercel.app"
            MaxAge: 3000
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${Environment}-fabularius-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt MediaBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !Ref OriginAccessControl
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # S3 Bucket Policy for CloudFront
  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${MediaBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-fabularius-api"
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: AWS_IAM
        Authorizers:
          AdminAuthorizer:
            FunctionArn: !GetAtt AdminAuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
            ReauthorizeEvery: 0

  # Lambda Functions
  GetAlbumsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-get-albums"
      CodeUri: backend/
      Handler: dist/functions/albums/get.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  CreateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-create-album"
      CodeUri: backend/
      Handler: dist/functions/albums/create.handler
      Events:
        PostCreateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: POST
        OptionsCreateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  GetAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-get-album"
      CodeUri: backend/
      Handler: dist/functions/albums/getById.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UploadMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-upload-media"
      CodeUri: backend/
      Handler: dist/functions/media/upload.handler
      Events:
        PostUploadMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: POST
        OptionsUploadMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: OPTIONS
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3WritePolicy:
            BucketName: !Ref MediaBucket

  GetMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-get-media"
      CodeUri: backend/
      Handler: dist/functions/media/get.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  # Admin Authentication Functions
  AdminLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-admin-login"
      CodeUri: backend/
      Handler: dist/functions/admin/auth/login.handler
      Events:
        PostLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/login
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/login
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  AdminLogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-admin-logout"
      CodeUri: backend/
      Handler: dist/functions/admin/auth/logout.handler
      Events:
        PostLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/logout
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/logout
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  AdminMeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-admin-me"
      CodeUri: backend/
      Handler: dist/functions/admin/auth/me.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/me
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  # Admin Album Management Functions
  AdminUpdateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-admin-update-album"
      CodeUri: backend/
      Handler: dist/functions/admin/albums/update.handler
      Events:
        PutUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: PUT
            Auth:
              Authorizer: AdminAuthorizer
        OptionsUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  AdminDeleteAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-admin-delete-album"
      CodeUri: backend/
      Handler: dist/functions/admin/albums/delete.handler
      Events:
        DeleteAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: DELETE
            Auth:
              Authorizer: AdminAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  AdminListAlbumsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-admin-list-albums"
      CodeUri: backend/
      Handler: dist/functions/admin/albums/list.handler
      Events:
        GetAlbums:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsAlbums:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  AdminDeleteMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-admin-delete-media"
      CodeUri: backend/
      Handler: dist/functions/admin/media/delete.handler
      Events:
        DeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}/media/{mediaId}
            Method: DELETE
            Auth:
              Authorizer: AdminAuthorizer
        OptionsDeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}/media/{mediaId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  AdminStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-admin-stats"
      CodeUri: backend/
      Handler: dist/functions/admin/stats.handler
      Events:
        GetStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/stats
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/stats
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket

  AdminAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-fabularius-admin-authorizer"
      CodeUri: backend/
      Handler: dist/functions/admin/auth/authorizer.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${Environment}-fabularius-api-url"

  CloudFrontUrl:
    Description: CloudFront distribution URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${Environment}-fabularius-cloudfront-url"

  MediaBucketName:
    Description: S3 bucket name for media storage
    Value: !Ref MediaBucket
    Export:
      Name: !Sub "${Environment}-fabularius-media-bucket"

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref MediaTable
    Export:
      Name: !Sub "${Environment}-fabularius-dynamodb-table"
