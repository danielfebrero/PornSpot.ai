AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: pornspot.ai - Minimalist Gallery

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, stage, prod]
    Description: Environment name

  DomainName:
    Type: String
    Default: pornspot.ai
    Description: Domain name for the application

  ImageUri:
    Type: String
    Description: Docker image URI for Lambda functions
    Default: "688567299790.dkr.ecr.us-east-1.amazonaws.com/prod-pornspot-lambda:latest"

# Conditions
Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DYNAMODB_TABLE: !Ref MediaTable
        S3_BUCKET: !Ref MediaBucket
        CLOUDFRONT_DOMAIN: !Sub "https://${CloudFrontDistribution.DomainName}"
        FROM_EMAIL: !Sub "noreply@${DomainName}"
        FROM_NAME: "PornSpot.ai"
        GOOGLE_CLIENT_ID: !Sub "{{resolve:ssm:/pornspot-ai/${Environment}/google-client-id}}"
        GOOGLE_CLIENT_SECRET: ""
        REVALIDATE_SECRET: ""
        FRONTEND_URL: ""
        AWS_SAM_LOCAL: ""
        LOCAL_AWS_ENDPOINT: ""
        IS_OFFLINE: ""
        USE_CUSTOM_DOMAIN: "true" # Set to "true" when using api.pornspot.ai
        SENDGRID_API_KEY: ""

Resources:
  # DynamoDB Table - Single table design
  MediaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-pornspot-media"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
        - AttributeName: GSI3PK
          AttributeType: S
        - AttributeName: GSI3SK
          AttributeType: S
        - AttributeName: GSI4PK
          AttributeType: S
        - AttributeName: GSI4SK
          AttributeType: S
        - AttributeName: GSI5PK
          AttributeType: S
        - AttributeName: GSI5SK
          AttributeType: S
        - AttributeName: GSI6PK
          AttributeType: S
        - AttributeName: GSI6SK
          AttributeType: N
        - AttributeName: GSI7PK
          AttributeType: S
        - AttributeName: GSI7SK
          AttributeType: S
        - AttributeName: GSI8PK
          AttributeType: S
        - AttributeName: GSI8SK
          AttributeType: S
        - AttributeName: isPublic
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: entityType
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI3
          KeySchema:
            - AttributeName: GSI3PK
              KeyType: HASH
            - AttributeName: GSI3SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI4
          KeySchema:
            - AttributeName: GSI4PK
              KeyType: HASH
            - AttributeName: GSI4SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI5
          KeySchema:
            - AttributeName: GSI5PK
              KeyType: HASH
            - AttributeName: GSI5SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI6
          KeySchema:
            - AttributeName: GSI6PK
              KeyType: HASH
            - AttributeName: GSI6SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI7
          KeySchema:
            - AttributeName: GSI7PK
              KeyType: HASH
            - AttributeName: GSI7SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI8
          KeySchema:
            - AttributeName: GSI8PK
              KeyType: HASH
            - AttributeName: GSI8SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: isPublic-createdAt-index
          KeySchema:
            - AttributeName: isPublic
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: entityType-createdAt-index
          KeySchema:
            - AttributeName: entityType
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: ttl

  # S3 Bucket for media storage
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-pornspot-media-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - http://localhost:3000
              - !Sub "https://dev.${DomainName}"
              - !Sub "https://stage.${DomainName}"
              - !Sub "https://www.${DomainName}"
              - !Sub "https://${DomainName}"
              - "https://*.vercel.app"
              - "https://*.pornspot.ai"
              - "https://pornspot-ai-frontend.vercel.app"
            MaxAge: 3000
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${Environment}-pornspot-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt MediaBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !Ref OriginAccessControl
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # S3 Bucket Policy for CloudFront
  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${MediaBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # Authorizer Functions - Container-based approach
  UserAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-authorizer-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/authorizer.handler"]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  AdminAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-authorizer-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/auth/authorizer.handler"]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  # Moderator authorizer - allows admin and moderator roles
  ModeratorAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-moderator-authorizer-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/moderator/auth/authorizer.handler"]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-pornspot-api"
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: AWS_IAM
        Authorizers:
          AdminAuthorizer:
            FunctionArn: !GetAtt AdminAuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
            ReauthorizeEvery: 0
          ModeratorAuthorizer:
            FunctionArn: !GetAtt ModeratorAuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
            ReauthorizeEvery: 0
          UserAuthorizer:
            FunctionArn: !GetAtt UserAuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
            ReauthorizeEvery: 0

  # WebSocket API Gateway
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${Environment}-pornspot-websocket-api"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref Environment
      AutoDeploy: true

  # WebSocket Lambda Functions
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-websocket-connect-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/websocket/connect.handler"]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/jwt-encryption-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/jwt-secret"

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-websocket-disconnect-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/websocket/disconnect.handler"]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  WebSocketRouteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-websocket-route-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/websocket/route.handler"]
      Environment:
        Variables:
          WEBSOCKET_API_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/POST/@connections/*"
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/comfyui-api-endpoint"

  # WebSocket Routes
  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Sub "integrations/${WebSocketConnectIntegration}"

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Sub "integrations/${WebSocketDisconnectIntegration}"

  WebSocketDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      Target: !Sub "integrations/${WebSocketRouteIntegration}"

  # WebSocket Integrations
  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations"

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations"

  WebSocketRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketRouteFunction.Arn}/invocations"

  # WebSocket Lambda Permissions
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketConnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketDisconnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  WebSocketRoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketRouteFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  # Lambda Functions
  GetAlbumsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-albums-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/albums/get.handler"]
      Events:
        GetAlbums:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  GetDiscoverFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-discover-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/discover/get.handler"]
      Events:
        GetDiscover:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /discover
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsGetDiscover:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /discover
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  CreateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-create-album-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/albums/create.handler"]
      Events:
        PostCreateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsCreateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"

  GetAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-album-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/albums/getById.handler"]
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UpdateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-update-album-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/albums/update.handler"]
      MemorySize: 1024
      Timeout: 60
      Events:
        PutUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}
            Method: PUT
            Auth:
              Authorizer: UserAuthorizer
        OptionsUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  DeleteAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-delete-album-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/albums/delete.handler"]
      Events:
        DeleteAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UploadMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-upload-media-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/media/add.handler"]
      Events:
        PostUploadMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsUploadMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3WritePolicy:
            BucketName: !Ref MediaBucket

  GetMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-media-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/media/get.handler"]
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  GetMediaByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-media-by-id-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/media/get-by-id.handler"]
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /media/{mediaId}
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UpdateMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-update-media-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/media/update.handler"]
      Events:
        UpdateMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /media/{mediaId}
            Method: PUT
            Auth:
              Authorizer: UserAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  RemoveMediaFromAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-remove-media-from-album-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/media/remove.handler"]
      Events:
        DeleteMediaFromAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media/{mediaId}
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
        OptionsRemoveMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media/{mediaId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  DeleteMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-delete-media-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/media/delete.handler"]
      Events:
        DeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /media/{mediaId}
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
        OptionsDeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /media/{mediaId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3CrudPolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  BulkRemoveMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-bulk-remove-media-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/media/bulk-remove.handler"]
      Timeout: 300 # 5 minutes for bulk operations
      MemorySize: 512 # More memory for bulk processing
      Events:
        BulkRemoveMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media/bulk-remove
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
        OptionsBulkRemoveMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /albums/{albumId}/media/bulk-remove
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  GetAllMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-all-media-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/media/get-all.handler"]
      Timeout: 60
      MemorySize: 512
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /media
            Method: GET
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  DownloadMediaZipFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-download-media-zip-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/media/download-zip.handler"]
      Timeout: 300
      MemorySize: 1024
      Events:
        PostDownloadZip:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /media/download-zip
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsDownloadZip:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /media/download-zip
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket

  UserMediaListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-media-list-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/media/list.handler"]
      Events:
        GetUserMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/media
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsUserMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/media
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  ProcessUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-process-upload-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/media/process-upload.handler"]
      MemorySize: 1024
      Timeout: 120
      Environment:
        Variables:
          MEDIA_BUCKET_NAME: !Sub "${Environment}-pornspot-media-${AWS::AccountId}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}/*"
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
  # Lambda permission for S3 to invoke ProcessUploadFunction
  ProcessUploadFunctionS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessUploadFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}"
      SourceAccount: !Ref AWS::AccountId

  # Custom resource to configure S3 bucket notification
  ConfigureS3NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-configure-s3-notification"
      Runtime: python3.12
      Handler: index.handler
      CodeUri: backend/functions/ConfigureS3Notification/
      Timeout: 60
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutBucketNotification
                - s3:GetBucketNotification
                - s3:PutBucketNotificationConfiguration # (add both for safety)
                - s3:GetBucketNotificationConfiguration
              Resource: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}"

  S3NotificationConfiguration:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ConfigureS3NotificationFunction.Arn
      BucketName: !Sub "${Environment}-pornspot-media-${AWS::AccountId}"
      FunctionArn: !GetAtt ProcessUploadFunction.Arn
      # Force update by changing this timestamp when needed
      Version: "2025-08-11"
      # Ensure permission exists before configuring notification
      LambdaPermissionId: !Ref ProcessUploadFunctionS3Permission
    DependsOn:
      - MediaBucket

  # Configuration API Functions
  GetPermissionsConfigFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-permissions-config-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/config/permissions.handler"]
      Events:
        GetPermissions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /config/permissions
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsPermissions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /config/permissions
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  # Admin Authentication Functions
  AdminLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-login-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/auth/login.handler"]
      Events:
        PostLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/login
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/login
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  CheckUsernameFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-check-username-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/check-username.handler"]
      Events:
        PostCheckUsername:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/check-username
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsCheckUsername:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/check-username
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  GetMinimalUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-get-minimal-user-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/get-minimal-user.handler"]
      Events:
        GetMinimalUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/get-minimal-user
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsGetMinimalUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/get-minimal-user
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  InviteCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-invite-code-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/invite-code.handler"]
      Events:
        PostInviteCode:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/invite-code
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsInviteCode:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/invite-code
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  # User PSC Functions
  UserPSCStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-psc-stats-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/psc/stats.handler"]
      Events:
        GetStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/psc/stats
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/psc/stats
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserPSCBalanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-psc-balance-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/psc/balance.handler"]
      Events:
        GetBalance:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/psc/balance
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsBalance:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/psc/balance
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserPSCTransactionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-psc-transactions-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/psc/transactions.handler"]
      Events:
        GetTransactions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/psc/transactions
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsTransactions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/psc/transactions
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserPSCRatesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-psc-rates-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/psc/rates.handler"]
      Events:
        GetRates:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/psc/rates
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsRates:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/psc/rates
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserPSCSpendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-psc-spend-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/psc/spend.handler"]
      Events:
        PostSpend:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/psc/spend
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsSpend:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/psc/spend
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaTable

  AdminLogoutFunction:
    Type: AWS::Serverless::Function
  I2VClearJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-generate-i2v-clear-job-v1"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/generation/i2v-clear-job.handler"]
      Events:
        DeleteI2VJob:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/job
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
        OptionsI2VJob:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/job
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-logout-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/auth/logout.handler"]
      Events:
        PostLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/logout
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/logout
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  AdminMeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-me-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/auth/me.handler"]
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/me
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
  UserLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-login-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/login.handler"]
      Events:
        PostLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/login
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsLogin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/login
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
  # Admin Album Management Functions
  AdminUpdateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-update-album-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/albums/update.handler"]
      MemorySize: 1024
      Timeout: 60
      Events:
        PutUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: PUT
            Auth:
              Authorizer: AdminAuthorizer
        OptionsUpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  AdminDeleteAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-delete-album-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/albums/delete.handler"]
      Events:
        DeleteAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}
            Method: DELETE
            Auth:
              Authorizer: AdminAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  AdminListAlbumsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-list-albums-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/albums/list.handler"]
      Events:
        GetAlbums:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsAlbums:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  AdminListMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-list-media-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/media/list.handler"]
      Events:
        GetMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/media
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/media
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  AdminDeleteMediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-delete-media-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/albums/delete-media.handler"]
      Events:
        DeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}/media/{mediaId}
            Method: DELETE
            Auth:
              Authorizer: AdminAuthorizer
        OptionsAdminDeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/albums/{albumId}/media/{mediaId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
              Resource: !GetAtt MediaTable.Arn
            - Effect: Allow
              Action:
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${MediaBucket}/*"
            - Effect: Allow
              Action:
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${MediaBucket}/*"

  AdminDeleteMediaCompletelyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-delete-media-completely-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/media/delete.handler"]
      Events:
        DeleteMediaCompletely:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/media/{mediaId}
            Method: DELETE
            Auth:
              Authorizer: AdminAuthorizer
        OptionsAdminDeleteMediaCompletely:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/media/{mediaId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3CrudPolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  # Admin Users Functions
  AdminUsersListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-users-list-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/users/list.handler"]
      Events:
        GetUsersList:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/users/list
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsUsersList:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/users/list
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  AdminUsersDisableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-users-disable-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/users/disable.handler"]
      Events:
        DisableUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/users/disable
            Method: POST
            Auth:
              Authorizer: AdminAuthorizer
        OptionsDisableUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/users/disable
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaTable

  AdminUsersEnableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-users-enable-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/users/enable.handler"]
      Events:
        EnableUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/users/enable
            Method: POST
            Auth:
              Authorizer: AdminAuthorizer
        OptionsEnableUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/users/enable
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaTable

  # PSC Admin Functions
  AdminPSCOverviewFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-psc-overview-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/psc/overview.handler"]
      Events:
        GetOverview:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/overview
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsOverview:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/overview
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  AdminPSCConfigFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-psc-config-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/psc/config.handler"]
      Events:
        GetConfig:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/config
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        PutConfig:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/config
            Method: PUT
            Auth:
              Authorizer: AdminAuthorizer
        PostConfigReset:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/config/reset
            Method: POST
            Auth:
              Authorizer: AdminAuthorizer
        OptionsConfig:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/config
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        OptionsConfigReset:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/config/reset
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaTable

  AdminPSCBudgetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-psc-budgets-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/psc/budgets.handler"]
      Events:
        GetBudgets:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/budgets
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        PutBudget:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/budgets/{date}
            Method: PUT
            Auth:
              Authorizer: AdminAuthorizer
        DeleteBudget:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/budgets/{date}
            Method: DELETE
            Auth:
              Authorizer: AdminAuthorizer
        OptionsBudgets:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/budgets
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        OptionsBudgetDate:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/budgets/{date}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaTable

  AdminPSCTransactionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-admin-psc-transactions-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/admin/psc/transactions.handler"]
      Events:
        GetTransactions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/transactions
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsTransactions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/psc/transactions
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  # PSC Rate Snapshot Functions
  PSCSnapshotRatesDailyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-psc-snapshot-rates-daily-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/psc/snapshotRatesDaily.handler"]
      Events:
        ScheduleRule:
          Type: Schedule
          Properties:
            Schedule: cron(*/5 * * * ? *) # Every 5 minutes
            Name: !Sub "${Environment}-psc-daily-snapshot-schedule"
            Description: "Trigger PSC rate snapshot every 5 minutes for daily stats"
            Enabled: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaTable

  PSCSnapshotRatesWeeklyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-psc-snapshot-rates-weekly-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/psc/snapshotRatesWeekly.handler"]
      Events:
        ScheduleRule:
          Type: Schedule
          Properties:
            Schedule: cron(1 * * * ? *) # Every hour at 1 minute past
            Name: !Sub "${Environment}-psc-weekly-snapshot-schedule"
            Description: "Trigger PSC rate snapshot every hour for weekly stats"
            Enabled: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaTable

  # User Authentication Functions
  UserRegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-register-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/register.handler"]
      Events:
        PostRegister:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/register
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsRegister:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/register
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/sendgrid-api-key"

  UserLogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-logout-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/logout.handler"]
      Events:
        PostLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/logout
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsLogout:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/logout
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UserMeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-me-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/me.handler"]
      Events:
        GetMe:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/me
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsMe:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/me
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGenerateJwtFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-generate-jwt-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/generate-jwt.handler"]
      Events:
        PostGenerateJwt:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/generate-jwt
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsGenerateJwt:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/generate-jwt
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/jwt-encryption-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/jwt-secret"

  UserProfileEditFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-profile-edit-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/profile/edit.handler"]
      Events:
        PutProfileEdit:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/profile/edit
            Method: PUT
            Auth:
              Authorizer: UserAuthorizer
        OptionsProfileEdit:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/profile/edit
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserProfileGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-profile-get-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/profile/get.handler"]
      Events:
        GetProfile:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/profile/get
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsProfile:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/profile/get
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserNotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-notifications-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/notifications.handler"]
      Events:
        GetNotifications:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/notifications
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsNotifications:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/notifications
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserCountUnreadNotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-count-unread-notifications-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/count-unread-notifications.handler"]
      Events:
        GetUnreadCount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/count-unread-notifications
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsUnreadCount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/count-unread-notifications
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGenerationSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-generation-settings-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/generation/get-settings.handler"]
      Events:
        GetGenerationSettings:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/generation/settings
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsGenerationSettings:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/generation/settings
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserFollowFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-follow-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/follow/follow.handler"]
      Events:
        PostFollow:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/follow
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsFollow:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/follow
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserUnfollowFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-unfollow-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/follow/unfollow.handler"]
      Events:
        DeleteUnfollow:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/unfollow
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
        OptionsUnfollow:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/unfollow
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UserFollowingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-following-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/follow/following.handler"]
      Events:
        GetFollowing:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/following
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsFollowing:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/following
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserFollowersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-followers-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/follow/followers.handler"]
      Events:
        GetFollowers:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/followers
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsFollowers:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/followers
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserAvatarUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-avatar-upload-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/profile/avatar/upload.handler"]
      Events:
        PostAvatarUpload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/profile/avatar/upload
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsAvatarUpload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/profile/avatar/upload
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${Environment}-pornspot-media-${AWS::AccountId}/*"

  UserChangePasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-change-password-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/change-password.handler"]
      Events:
        PutChangePassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/change-password
            Method: PUT
            Auth:
              Authorizer: UserAuthorizer
        OptionsChangePassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/change-password
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-forgot-password-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/forgot-password.handler"]
      Events:
        PostForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/forgot-password
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/forgot-password
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/sendgrid-api-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"

  UserResetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-reset-password-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/reset-password.handler"]
      Events:
        PostResetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/reset-password
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsResetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/auth/reset-password
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UserDeleteAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-delete-account-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/account/delete.handler"]
      Events:
        DeleteAccount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/account/delete
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
        OptionsDeleteAccount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/account/delete
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserCancelSubscriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-cancel-subscription-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/subscription/cancel.handler"]
      Events:
        PostCancelSubscription:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/subscription/cancel
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsCancelSubscription:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/subscription/cancel
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserVerifyEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-verify-email-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/verify-email.handler"]
      Events:
        PostVerifyEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/verify-email
            Method: POST
            Auth:
              Authorizer: NONE
        GetVerifyEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/verify-email
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsVerifyEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/verify-email
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UserResendVerificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-resend-verification-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/resend-verification.handler"]
      Events:
        PostResendVerification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/resend-verification
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsResendVerification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/resend-verification
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/sendgrid-api-key"

  # TrustPay - Initiate Payment
  TrustpayInitiatePaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-trustpay-initiate-payment-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/trustpay/initiatePayment.handler"]
      Events:
        PostInitiatePayment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /trustpay/initiatePayment
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsInitiatePayment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /trustpay/initiatePayment
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/trustpay-project-id"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/trustpay-secret-key"

  # Finby - Initiate Payment
  FinbyInitiatePaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-finby-initiate-payment-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/finby/initiatePayment.handler"]
      Events:
        PostInitiatePayment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /finby/initiatePayment
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsInitiatePayment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /finby/initiatePayment
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/finby-account-id"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/finby-secret-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/finby-payment-type"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/finby-notification-url"

  FinbyNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-finby-notification-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/finby/notification.handler"]
      Events:
        GetFinbyNotification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /finby/notification
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsFinbyNotification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /finby/notification
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/finby-account-id"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/finby-secret-key"

  # Finby - Status Callback
  FinbyStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-finby-status-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/finby/status.handler"]
      Events:
        PostFinbyStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /finby/status
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsFinbyStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /finby/status
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserOAuthGoogleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-oauth-google-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/auth/oauth-google.handler"]
      Events:
        PostOAuthCallback:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/oauth/callback
            Method: POST
            Auth:
              Authorizer: NONE
        GetOAuthCallback:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/oauth/callback
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsOAuthCallback:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/oauth/callback
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/google-client-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/sendgrid-api-key"

  # User Interaction Functions
  UserLikeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-like-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/interactions/like.handler"]
      Events:
        PostLike:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/like
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsLike:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/like
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UserBookmarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-bookmark-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/interactions/bookmark.handler"]
      Events:
        PostBookmark:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmark
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsBookmark:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmark
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  UserViewFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-view-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/interactions/view.handler"]
      Events:
        PostView:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/view
            Method: POST
            Auth:
              Authorizer: NONE # Views can be tracked without authentication
        OptionsView:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/view
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable

  UserGetLikesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-likes-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/interactions/get-likes.handler"]
      Events:
        GetLikes:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/likes
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsLikes:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/likes
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGetBookmarksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-bookmarks-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/interactions/get-bookmarks.handler"]
      Events:
        GetBookmarks:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmarks
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsBookmarks:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/bookmarks
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGetInteractionStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-interaction-status-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/interactions/get-interaction-status.handler"]
      Events:
        GetInteractionStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/status
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsInteractionStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/status
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  # View Count Functions
  ContentGetViewCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-content-get-view-count-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/content/get-view-count.handler"]
      Events:
        GetViewCount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /content/view-count
            Method: POST
            Auth:
              Authorizer: NONE # Public endpoint for SSG pages
        OptionsViewCount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /content/view-count
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  # Comment Functions
  UserCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-comment-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/interactions/comment.handler"]
      Events:
        PostComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        PutComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment/{commentId}
            Method: PUT
            Auth:
              Authorizer: UserAuthorizer
        DeleteComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment/{commentId}
            Method: DELETE
            Auth:
              Authorizer: UserAuthorizer
        OptionsComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        OptionsCommentById:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comment/{commentId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/revalidate-secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/frontend-url"
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt MediaTable.Arn

  TargetGetCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-target-get-comments-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/interactions/get-comments.handler"]
      Events:
        GetComments:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comments/{targetType}/{targetId}
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsGetComments:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comments/{targetType}/{targetId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  UserGetCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-user-get-comments-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/user/interactions/get-comments.handler"]
      Events:
        GetComments:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comments
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsGetComments:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user/interactions/comments
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable

  # AI Generation Functions
  GenerationCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-generation-create-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/generation/generate.handler"]
      Environment:
        Variables:
          WEBSOCKET_API_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
      Events:
        GeneratePost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generation/generate
            Method: POST
            Auth:
              Authorizer: NONE
        OptionsGenerate:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generation/generate
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:DeleteItem
              Resource:
                - !GetAtt MediaTable.Arn
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/POST/@connections/*"
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/openrouter-api-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/comfyui-api-endpoint"

  # AI Generation Usage Stats Function
  GenerationUsageStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-generation-usage-stats-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/generation/usage-stats.handler"]
      Events:
        UsageStatsGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generation/usage-stats
            Method: GET
            Auth:
              Authorizer: NONE
        OptionsUsageStats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generation/usage-stats
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  # Image-to-Video Submit Job Function
  I2VSubmitJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-generate-i2v-submit-job-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/generation/i2v-submit-job.handler"]
      Environment:
        Variables:
          I2V_POLL_QUEUE_URL: !Ref I2VPollQueue
      Events:
        PostI2VSubmit:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/submit
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsI2VSubmit:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/submit
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/runpod-api-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/openrouter-api-key"
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt I2VPollQueue.Arn

  # Image-to-Video Poll Job Function
  I2VPollJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-generate-i2v-poll-job-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      MemorySize: 1024
      Timeout: 900
      ImageConfig:
        Command: ["functions/generation/i2v-poll-job.handler"]
      Environment:
        Variables:
          I2V_POLL_QUEUE_URL: !Ref I2VPollQueue
      Events:
        GetI2VPoll:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/poll
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsI2VPoll:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/poll
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        I2VPollSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt I2VPollQueue.Arn
            BatchSize: 5
            Enabled: true
            FunctionResponseTypes:
              - ReportBatchItemFailures
          # Handled by unified handler that detects SQS vs API events
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/runpod-api-key"
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource:
                - !Sub "${MediaBucket.Arn}/*"
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:SendMessage
              Resource:
                - !GetAtt I2VPollQueue.Arn

  # Image-to-Video Get Incomplete Jobs Function
  I2VGetIncompleteJobsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-generate-i2v-get-incomplete-jobs-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/generation/i2v-get-incomplete-jobs.handler"]
      Events:
        GetI2VIncompleteJobs:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/incomplete
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsI2VIncompleteJobs:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/incomplete
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  I2VGetFailedJobsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-generate-i2v-get-failed-jobs-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/generation/i2v-get-failed-jobs.handler"]
      Events:
        GetI2VFailedJobs:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/failed
            Method: GET
            Auth:
              Authorizer: UserAuthorizer
        OptionsI2VFailedJobs:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/failed
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  I2VRetryJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-generate-i2v-retry-job-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/generation/i2v-retry-job.handler"]
      Environment:
        Variables:
          I2V_POLL_QUEUE_URL: !Ref I2VPollQueue
      Events:
        PostI2VRetryJob:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/retry
            Method: POST
            Auth:
              Authorizer: UserAuthorizer
        OptionsI2VRetryJob:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /generate/i2v/retry
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/runpod-api-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/openrouter-api-key"
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt I2VPollQueue.Arn

  # SQS queue for delayed I2V polling
  I2VPollQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-i2v-poll-queue"
      VisibilityTimeout: 60
      MessageRetentionPeriod: 1209600 # 14 days
      DelaySeconds: 0

  # ============================================================================
  # Analytics Functions - Admin Analytics System
  # ============================================================================

  # Analytics API Function
  AnalyticsGetMetricsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-analytics-get-metrics-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/analytics/get-metrics.handler"]
      Events:
        GetMetrics:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/analytics/metrics
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        GetDashboard:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/analytics/dashboard
            Method: GET
            Auth:
              Authorizer: AdminAuthorizer
        OptionsMetrics:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/analytics/metrics
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        OptionsDashboard:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/analytics/dashboard
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  # Hourly Analytics Aggregation Function
  AnalyticsAggregateHourlyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-analytics-aggregate-hourly-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/analytics/aggregate-hourly.handler"]
      MemorySize: 512
      Timeout: 900 # 15 minutes for complex aggregations
      Events:
        HourlySchedule:
          Type: Schedule
          Properties:
            Schedule: "cron(1 * * * ? *)" # Every hour at minute 1
            Name: !Sub "${Environment}-pornspot-hourly-analytics"
            Description: "Runs hourly analytics aggregation every hour"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:BatchWriteItem
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - !GetAtt MediaBucket.Arn
                - !Sub "${MediaBucket.Arn}/*"

  # Daily Analytics Aggregation Function
  AnalyticsAggregateDailyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-analytics-aggregate-daily-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/analytics/aggregate-daily.handler"]
      MemorySize: 512
      Timeout: 900 # 15 minutes for complex aggregations
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: "cron(5 0 * * ? *)" # Every day at 00:05 UTC
            Name: !Sub "${Environment}-pornspot-daily-analytics"
            Description: "Runs daily analytics aggregation every day at 00:05 UTC"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:BatchWriteItem
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - !GetAtt MediaBucket.Arn
                - !Sub "${MediaBucket.Arn}/*"

  # Weekly Analytics Aggregation Function
  AnalyticsAggregateWeeklyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-analytics-aggregate-weekly-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/analytics/aggregate-weekly.handler"]
      MemorySize: 512
      Timeout: 900 # 15 minutes for complex aggregations
      Events:
        WeeklySchedule:
          Type: Schedule
          Properties:
            Schedule: "cron(10 0 ? * MON *)" # Every Monday at 00:10 UTC
            Name: !Sub "${Environment}-pornspot-weekly-analytics"
            Description: "Runs weekly analytics aggregation every Monday at 00:10 UTC"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:BatchWriteItem
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  # Monthly Analytics Aggregation Function
  AnalyticsAggregateMonthlyFunction:
    Type: AWS::Serverless::Function
    Condition: IsProd
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-analytics-aggregate-monthly-v2"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/analytics/aggregate-monthly.handler"]
      MemorySize: 512
      Timeout: 900 # 15 minutes for complex aggregations
      Events:
        MonthlySchedule:
          Type: Schedule
          Properties:
            Schedule: "cron(15 0 1 * ? *)" # 1st of each month at 00:15 UTC
            Name: !Sub "${Environment}-pornspot-monthly-analytics"
            Description: "Runs monthly analytics aggregation on the 1st of each month at 00:15 UTC"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:BatchWriteItem
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  # Daily Unread Notifications Email Digest
  UnreadNotificationsDigestFunction:
    Type: AWS::Serverless::Function
    Condition: IsProd
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-unread-notifications-digest"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/scheduled-emails/unread-digest.handler"]
      MemorySize: 512
      Timeout: 900
      Events:
        Daily:
          Type: Schedule
          Properties:
            Schedule: "cron(0 3 * * ? *)" # Every day at 03:00 UTC
            Name: !Sub "${Environment}-pornspot-unread-digest-03utc"
            Description: "Sends unread notifications digest emails daily at 03:00 UTC"
            Enabled: !If [IsProd, true, false]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/sendgrid-api-key"

  # Daily PSC Balance Email Digest
  PscBalanceDigestFunction:
    Type: AWS::Serverless::Function
    Condition: IsProd
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-psc-balance-digest"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/scheduled-emails/psc-balance-digest.handler"]
      MemorySize: 512
      Timeout: 900
      Events:
        Daily:
          Type: Schedule
          Properties:
            Schedule: "cron(0 4 * * ? *)" # Every day at 04:00 UTC
            Name: !Sub "${Environment}-pornspot-psc-balance-04utc"
            Description: "Sends PSC balance emails daily at 04:00 UTC"
            Enabled: !If [IsProd, true, false]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/sendgrid-api-key"

  # Monthly I2V Credits Reset for Pro Users
  GrantI2vCreditsToProFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-grant-i2v-credits-to-pro"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["functions/scheduled-jobs/grant-i2v-credits-to-pro.handler"]
      MemorySize: 512
      Timeout: 900
      Events:
        Daily:
          Type: Schedule
          Properties:
            Schedule: "cron(1 1 * * ? *)" # Every day at 01:01 UTC
            Name: !Sub "${Environment}-pornspot-grant-i2v-credits-daily"
            Description: "Grant i2v credits to Pro users on their monthly renewal date daily at 01:01 UTC"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt MediaTable.Arn
                - !Sub "${MediaTable.Arn}/index/*"

  # Daily subscription renewals and cancellations handler
  SubscriptionsRenewalAndCancellationsFunction:
    Type: AWS::Serverless::Function
    Condition: IsProd
    Properties:
      FunctionName: !Sub "${Environment}-pornspot-subscriptions-renewal-and-cancellations"
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command:
          [
            "functions/scheduled-jobs/subscriptions-renewal-and-cancellations.handler",
          ]
      MemorySize: 512
      Timeout: 900
      Events:
        Daily:
          Type: Schedule
          Properties:
            Schedule: "cron(1 0 * * ? *)" # Every day at 00:01 UTC
            Name: !Sub "${Environment}-pornspot-subscriptions-renewal-daily"
            Description: "Renews paid subscriptions and downgrades cancellations at 00:01 UTC"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MediaTable
        - DynamoDBWritePolicy:
            TableName: !Ref MediaTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !Sub "${MediaTable.Arn}/index/*"
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource:
                - !GetAtt MediaTable.Arn
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/finby-account-id"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pornspot-ai/${Environment}/finby-secret-key"

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${Environment}-pornspot-api-url"

  CloudFrontUrl:
    Description: CloudFront distribution URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${Environment}-pornspot-cloudfront-url"

  MediaBucketName:
    Description: S3 bucket name for media storage
    Value: !Ref MediaBucket
    Export:
      Name: !Sub "${Environment}-pornspot-media-bucket"

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref MediaTable
    Export:
      Name: !Sub "${Environment}-pornspot-dynamodb-table"

  WebSocketApiUrl:
    Description: WebSocket API Gateway endpoint URL
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${Environment}-pornspot-websocket-url"
